package com.timmy.dataalg.leetcode

/**
 * 给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。

注意：
对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。
如果 s 中存在这样的子串，我们保证它是唯一的答案。

示例 1：
输入：s = "ADOBECODEBANC", t = "ABC"
输出："BANC"
解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。

示例 2：
输入：s = "a", t = "a"
输出："a"
解释：整个字符串 s 是最小覆盖子串。

示例 3:
输入: s = "a", t = "aa"
输出: ""
解释: t 中两个字符 'a' 均应包含在 s 的子串中，
因此没有符合条件的子字符串，返回空字符串。
 */
fun main() {
}

/**
 * 1、审题：
 * - 输入一个主串s，字符串t，在主串中找到一个子串si，要求子串si包含了字符串t中的所有元素
 * - 并返回最短子串si
 * 2、解题：
 * - 从主串s中查找一个子串si，
 * - 有两个问题：
 * -- 如何判断s的一个子串中是否全部覆盖了字符串t的所有字符？
 * -- s的子串si如何变化大小？si是需要不断移动的
 */
fun minWindow(s: String, t: String): String {

    return ""
}