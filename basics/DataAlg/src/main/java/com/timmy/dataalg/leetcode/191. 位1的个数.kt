package com.timmy.dataalg.leetcode

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中
设置位的个数（也被称为汉明重量）。

示例 1：
输入：n = 11
输出：3
解释：输入的二进制串 1011 中，共有 3 个设置位。

示例 2：
输入：n = 128
输出：1
解释：输入的二进制串 10000000 中，共有 1 个设置位。

示例 3：
输入：n = 2147483645
输出：30
解释：输入的二进制串 11111111111111111111111111111101 中，共有 30 个设置位。

提示：
1 <= n <= 231 - 1
进阶：
如果多次调用这个函数，你将如何优化你的算法？
 */
fun main() {
//    val res = hammingWeight(11)
//    val res = hammingWeight(128)
    val res = hammingWeight(2147483645)
    println("res:$res")
}

/**
 * 1、审题：
 * - 输入一个二进制的无符号整数，求二进制格式的字符串中1的个数
 * 2、解题：
 * - 暴力解法是，将输入的数字n转换成二进制格式字符串，然后计算字符1的个数
 * - 采用位运算法：
 * -- 没错就是这个解法，使用中间位移数字 num，默认等于1，然后不断往左移动，
 * -- 一共移动32位，每次移动，都与数字n进行且&运算，相等结果等于不等于0，说明该位置是数字符号1
 */
fun hammingWeight(n: Int): Int {
    var res = 0
    var tag = 1
    for (i in 0 until 32) {
        val num = tag and n
        if (num != 0) {
            res++
        }
        tag = tag shl 1 // 左移一位
    }
    return res
}